package com.test.qa.automtion.datafactory;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;import org.testng.annotations.DataProvider;public class ExcelDataProvider {	public ExcelDataProvider() {	}	@DataProvider(name = "getData")	public static Object[][] getData(Method method) throws Exception {		Map<String, String> arguments = DataProviderUtils.resolveDataProviderArguments(method);		String sheetName = "";		String filePath = arguments.get("filePath");		String fileExtention = filePath.substring(filePath.indexOf(".") + 1);		if (fileExtention.equalsIgnoreCase("xls") || fileExtention.equalsIgnoreCase("xlsx")) {			if (arguments.get("sheetName").isEmpty()) {				sheetName = method.getName();			} else {				sheetName = arguments.get("sheetName");			}			return getExcelLines(sheetName, filePath);		}//		if (filePath != null && fileExtention == "yaml") {//		}////		if (filePath != null && fileExtention == "xml") {//		}////		if (filePath != null && fileExtention == "html") {//		}////		if (filePath != null && fileExtention == "properties") {//		}		return null;	}	@SuppressWarnings({ "rawtypes", "unchecked" })	private static Object[][] getExcelLines(String sheetName, String filePath) {		HashMap rowData;				Excel excel = new Excel(filePath);		excel.setWorkBook();		excel.setSheet(sheetName);				int rowNumber = excel.getSheet().getLastRowNum();		HashMap[][] tabArray = new HashMap[rowNumber ][1];		for (int i=1; i <= rowNumber; i++){			rowData = excel.getRowVals(i);			tabArray[i - 1][0] = extracted(rowData);		}		return tabArray;	}	@SuppressWarnings("unchecked")	private static HashMap<String, String> extracted(HashMap<String, String> colData) {		return (HashMap<String, String>) colData.clone();	}}